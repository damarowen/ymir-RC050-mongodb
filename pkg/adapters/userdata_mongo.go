// Package adapters are the glue between components and external sources.
// # This manifest was generated by ymir. DO NOT EDIT.
package adapters

import (
	"context"
	"fmt"
	"strings"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"

	"github.com/kubuskotak/ymir-test/pkg/infrastructure"
)

var UserDataMongoOpen = mongo.Connect // UserDataMongoOpen will invoke to test case.

// UserDataMongo is data of instances.
type UserDataMongo struct {
	NetworkDB
	Client *mongo.Client
}

// Open is open the connection of UserDataMongo.
func (usda *UserDataMongo) Open() (*mongo.Client, error) {
	if usda.Client == nil {
		return nil, fmt.Errorf("driver was failed to connected")
	}
	return usda.Client, nil
}

// Connect is connected the connection of UserDataMongo.
func (usda *UserDataMongo) Connect() (err error) {
	var clientOptions = options.Client().ApplyURI(usda.dsn())

	if infrastructure.Envs.UserDataMongo.Auth {
		clientOptions.SetAuth(options.Credential{
			Username: usda.User,
			Password: usda.Password,
		})
	}

	usda.Client, err = UserDataMongoOpen(context.Background(), clientOptions)
	if err != nil {
		return fmt.Errorf("failed to create client for MongoDB database: %v", err)
	}
	usda.Client.Database("myDatabaseName").Collection("user")
	return nil
}

// Disconnect is disconnect the connection of UserDataMongo.
func (usda *UserDataMongo) Disconnect() error {
	return usda.Client.Disconnect(context.Background())
}

// dsn returns the connection string for the UserDataMongo caches.
func (usda *UserDataMongo) dsn() string {
	if strings.Contains(usda.Protocol, "+srv") {
		return fmt.Sprintf("%s://%s", usda.Protocol, usda.Host)
	}
	return fmt.Sprintf("mongodb://%s:%d", usda.Host, usda.Port)
}

// WithUserDataMongo option function to assign on adapters.
func WithUserDataMongo(driver Driver[*mongo.Client]) Option {
	return func(a *Adapter) {
		if err := driver.Connect(); err != nil {
			panic(err)
		}
		open, err := driver.Open()
		if err != nil {
			panic(err)
		}
		if err := open.Ping(context.Background(), nil); err != nil {
			panic(err)
		}
		a.UserDataMongo = driver.(*UserDataMongo)
		a.PersistUsers = open.Database(driver.(*UserDataMongo).Database)
	}
}
